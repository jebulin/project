{"version":3,"sources":["Components/Style1.jsx","DataService.js","Components/Style2.jsx","Components/buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["customStyles1","rows","style","size","maxHeight","head","fontSize","fontWeight","title","headCells","background","paddingLeft","paddingRight","paddingTop","paddingBottom","fontStyle","cells","data","pageObj","this","length","fetch","response","json","startIndex","page","slice","customStyles2","fontStyles","Buttons","state","bgColor1","bgColor2","align1","align2","props","changeDark","changeLight","large","small","className","Dropdown","Toggle","variant","id","Menu","Item","onSelect","changeToDark","bind","changeToLight","Component","App","loadMoreData","loadData","dark","newColor","setState","bgColor","light","newFont","datas","align","columns","name","selector","right","width","sortable","allowOverFlow","center","cell","d","height","alt","url","src","target","href","thumbnailUrl","DataService","fetchData","newData","neededData","concat","backgroundColor","noHeader","responsive","key","margin","overflowY","highlightOnHover","selectableRows","fixedHeader","selectableRowsVisibleOnly","selectableRowsHighlight","customStyles","dataLength","next","hasMore","scrollThreshold","initialScrollY","loader","textAlign","endMessage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01906e50.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst customStyles1 = {\r\n    rows: {\r\n      style: {\r\n        size:'10px',\r\n        maxHeight: '2px', \r\n      }\r\n    },\r\n    head:{\r\n      style:{\r\n      maxHeight:'30px',\r\n      fontSize:\"8px\",\r\n      fontWeight:400\r\n      }\r\n    },\r\n    title:{\r\n      style:{\r\n      maxHeight:'0px',\r\n      }\r\n    },\r\n    headCells: {\r\n      style: {\r\n        background:'#AFA7A7',\r\n        maxHeight:\"30px\",\r\n        paddingLeft:\"3px\",\r\n        paddingRight:\"3px\",\r\n        paddingTop:\"3px\",\r\n        paddingBottom:\"0px\",\r\n        fontSize:'10px',\r\n        fontStyle:'Bold'\r\n      },\r\n    },\r\n    cells: {\r\n      style: {\r\n        fontSize:'10px'\r\n      },\r\n    },\r\n  };\r\nexport default customStyles1;  \r\n\r\n\r\n","\r\nclass DataService {\r\n        data=[];\r\n\r\n        async fetchData(pageObj) {\r\n        if(!this.data.length)\r\n        {\r\n            const url=\"https://jsonplaceholder.typicode.com/photos\";\r\n            const response = await fetch(url);\r\n            this.data= await response.json();\r\n        }\r\n        let startIndex=(pageObj.page*pageObj.size);\r\n\r\n        return this.data.slice(startIndex,startIndex+pageObj.size);\r\n    }\r\n}\r\nexport default new DataService();","import React from 'react';\r\n\r\nconst customStyles2 = {\r\n    rows: {\r\n      style: {\r\n        size:'10px',\r\n        maxHeight: '2px', \r\n      }\r\n    },\r\n    head:{\r\n      style:{\r\n      maxHeight:'30px',\r\n      fontSize:\"8px\",\r\n      fontWeight:400\r\n      }\r\n    },\r\n    title:{\r\n      style:{\r\n      maxHeight:'0px',\r\n      }\r\n    },\r\n    headCells: {\r\n      style: {\r\n        background:'#AFA7A7',\r\n        maxHeight:\"30px\",\r\n        paddingLeft:\"3px\",\r\n        paddingRight:\"3px\",\r\n        paddingTop:\"3px\",\r\n        paddingBottom:\"0px\",\r\n        fontSize:\"20px\",\r\n        fontStyles:'Bold'\r\n      },\r\n    },\r\n    cells: {\r\n      style: {\r\n        fontStyle:\"Italic\",\r\n        fontSize:'20px'\r\n      },\r\n    },\r\n  };\r\nexport default customStyles2;  \r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport customStyles2 from './Style2';\r\nimport customStyles1 from './Style1';\r\n\r\nclass Buttons extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n          bgColor1:'#000000',\r\n          bgColor2:'#D7D3D3',\r\n          align1:'right',\r\n          align2:'false',\r\n        }\r\n      }\r\n      changeToDark(){\r\n        this.props.changeDark(this.state.bgColor1);\r\n      }\r\n      changeToLight(){\r\n      this.props.changeLight(this.state.bgColor2);\r\n      }\r\n      large(){\r\n        this.props.large(customStyles2);\r\n      }\r\n      small(){\r\n        this.props.small(customStyles1);\r\n     }\r\n  render() {\r\n    return (\r\n      <div className=\"d-inline-flex mt-2 mb-2\">\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            className=\" bg-secondary sm d-inline mr-3 ml-4 \"\r\n            variant=\"secondary\"\r\n            id=\"dropdown-basic\"\r\n          >\r\n            Themes\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item onSelect={this.changeToDark.bind(this)} className=\"small\">\r\n              Dark\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onSelect={this.changeToLight.bind(this)} className=\"small\">\r\n              Light\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            className=\" bg-secondary sm d-inline\"\r\n            variant=\"secondary\"\r\n            id=\"dropdown-basic\"\r\n          >\r\n            Font Size\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item onSelect={this.large.bind(this)} className=\"small\">\r\n              Large\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onSelect={this.small.bind(this)} className=\"small\">Small</Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Buttons;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport DataTable, { createTheme } from \"react-data-table-component\";\nimport customStyles1 from \"./Components/Style1\";\nimport DataService from \"./DataService\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Buttons from \"./Components/buttons\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      datas: [],\n      bgColor: \"#D7D3D3\",\n      align:true,\n      fontSize: customStyles1 \n    };\n    this.pageObj = {\n      page: 0,\n      size: 20,\n    };\n    this.columns = [\n      { name: \"ID\", selector: \"id\", right:this.state.align, width: \"6%\", sortable: true },\n      {\n        name: \"AlbumId\",\n        selector: \"albumId\",\n        right: this.state.align,\n        allowOverFlow: true,\n        width: \"10%\",\n        sortable: true,\n      },\n      {\n        name: \"Image\",\n        width: \"20%\",\n        center: true,\n        cell: (d) => <img height=\"38x\" width=\"38px\" alt={d.url} src={d.url} />,\n      },\n      { name: \"Title\", selector: \"title\", center: true, width: \"33.25%\" },\n      {\n        name: \"Thumbnail Url\",\n        cell: (d) => (\n          <a target=\"_blank\" href={d.thumbnailUrl}>\n            {d.thumbnailUrl}\n          </a>\n        ),\n        width: \"auto\",\n      },\n    ];\n    \n  }\n    \n  async componentDidMount() {\n    this.loadData();\n  }\n  async loadData() {\n    let newData = await DataService.fetchData(this.pageObj);\n    let neededData = this.state.datas.concat(newData);\n    this.setState({ datas: neededData });\n    this.pageObj.page += 1;\n  }\n  loadMoreData = () => {\n    this.loadData();\n  };\n  dark = (newColor) => {\n    this.setState({ bgColor: newColor });\n  };\n  light = (newColor) => {\n    this.setState({ bgColor: newColor });\n  };\n  large=(newFont)=>{\n    this.setState({fontSize:newFont});\n  }\n  small=(newFont)=>{\n    this.setState({fontSize:newFont});\n  }\n  \n\n  render() {\n    const data = this.state.datas;\n    const bgColor = this.state.bgColor;\n    const fontSize=this.state.fontSize;\n    return (\n      <div style={{ backgroundColor: bgColor }}>\n        <Buttons changeDark={this.dark.bind(this)}\n        changeLight={this.light.bind(this)}\n        large={this.large.bind(this)}\n        small={this.small.bind(this)}\n        />\n        <DataTable\n          noHeader\n          responsive=\"true\"\n          columns={this.columns}\n          data={data}\n          key={data.id}\n          style={{\n            margin: \"0% 1% 2% 2%\",\n            width: \"95%\",\n            overflowY: \"auto\",\n          }}\n          highlightOnHover=\"true\"\n          selectableRows=\"true\"\n          fixedHeader\n          selectableRowsVisibleOnly=\"true\"\n          selectableRowsHighlight=\"true\"\n          customStyles={fontSize}\n        />\n        <InfiniteScroll\n          dataLength={this.state.datas.length}\n          next={this.loadMoreData}\n          hasMore={this.loadMoreData}\n          scrollThreshold='0.005'\n          initialScrollY='2'\n          loader={<h5 style={{textAlign:\"center\"}}>Loading...</h5>}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <div>  \n    <App/>\n    </div>,\n    document.getElementById('root')\n  );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}